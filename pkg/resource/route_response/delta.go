// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package route_response

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.APIID, b.ko.Spec.APIID) {
		delta.Add("Spec.APIID", a.ko.Spec.APIID, b.ko.Spec.APIID)
	} else if a.ko.Spec.APIID != nil && b.ko.Spec.APIID != nil {
		if *a.ko.Spec.APIID != *b.ko.Spec.APIID {
			delta.Add("Spec.APIID", a.ko.Spec.APIID, b.ko.Spec.APIID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ModelSelectionExpression, b.ko.Spec.ModelSelectionExpression) {
		delta.Add("Spec.ModelSelectionExpression", a.ko.Spec.ModelSelectionExpression, b.ko.Spec.ModelSelectionExpression)
	} else if a.ko.Spec.ModelSelectionExpression != nil && b.ko.Spec.ModelSelectionExpression != nil {
		if *a.ko.Spec.ModelSelectionExpression != *b.ko.Spec.ModelSelectionExpression {
			delta.Add("Spec.ModelSelectionExpression", a.ko.Spec.ModelSelectionExpression, b.ko.Spec.ModelSelectionExpression)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ResponseModels, b.ko.Spec.ResponseModels) {
		delta.Add("Spec.ResponseModels", a.ko.Spec.ResponseModels, b.ko.Spec.ResponseModels)
	} else if a.ko.Spec.ResponseModels != nil && b.ko.Spec.ResponseModels != nil {
		if !ackcompare.MapStringStringPEqual(a.ko.Spec.ResponseModels, b.ko.Spec.ResponseModels) {
			delta.Add("Spec.ResponseModels", a.ko.Spec.ResponseModels, b.ko.Spec.ResponseModels)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ResponseParameters, b.ko.Spec.ResponseParameters) {
		delta.Add("Spec.ResponseParameters", a.ko.Spec.ResponseParameters, b.ko.Spec.ResponseParameters)
	} else if a.ko.Spec.ResponseParameters != nil && b.ko.Spec.ResponseParameters != nil {
		if !reflect.DeepEqual(a.ko.Spec.ResponseParameters, b.ko.Spec.ResponseParameters) {
			delta.Add("Spec.ResponseParameters", a.ko.Spec.ResponseParameters, b.ko.Spec.ResponseParameters)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RouteID, b.ko.Spec.RouteID) {
		delta.Add("Spec.RouteID", a.ko.Spec.RouteID, b.ko.Spec.RouteID)
	} else if a.ko.Spec.RouteID != nil && b.ko.Spec.RouteID != nil {
		if *a.ko.Spec.RouteID != *b.ko.Spec.RouteID {
			delta.Add("Spec.RouteID", a.ko.Spec.RouteID, b.ko.Spec.RouteID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RouteResponseKey, b.ko.Spec.RouteResponseKey) {
		delta.Add("Spec.RouteResponseKey", a.ko.Spec.RouteResponseKey, b.ko.Spec.RouteResponseKey)
	} else if a.ko.Spec.RouteResponseKey != nil && b.ko.Spec.RouteResponseKey != nil {
		if *a.ko.Spec.RouteResponseKey != *b.ko.Spec.RouteResponseKey {
			delta.Add("Spec.RouteResponseKey", a.ko.Spec.RouteResponseKey, b.ko.Spec.RouteResponseKey)
		}
	}

	return delta
}
