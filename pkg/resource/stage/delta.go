// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package stage

import (
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
)

// Hack to avoid import errors during build...
var (
	_ = &reflect.Method{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.AccessLogSettings, b.ko.Spec.AccessLogSettings) {
		delta.Add("Spec.AccessLogSettings", a.ko.Spec.AccessLogSettings, b.ko.Spec.AccessLogSettings)
	} else if a.ko.Spec.AccessLogSettings != nil && b.ko.Spec.AccessLogSettings != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.AccessLogSettings.DestinationARN, b.ko.Spec.AccessLogSettings.DestinationARN) {
			delta.Add("Spec.AccessLogSettings.DestinationARN", a.ko.Spec.AccessLogSettings.DestinationARN, b.ko.Spec.AccessLogSettings.DestinationARN)
		} else if a.ko.Spec.AccessLogSettings.DestinationARN != nil && b.ko.Spec.AccessLogSettings.DestinationARN != nil {
			if *a.ko.Spec.AccessLogSettings.DestinationARN != *b.ko.Spec.AccessLogSettings.DestinationARN {
				delta.Add("Spec.AccessLogSettings.DestinationARN", a.ko.Spec.AccessLogSettings.DestinationARN, b.ko.Spec.AccessLogSettings.DestinationARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AccessLogSettings.Format, b.ko.Spec.AccessLogSettings.Format) {
			delta.Add("Spec.AccessLogSettings.Format", a.ko.Spec.AccessLogSettings.Format, b.ko.Spec.AccessLogSettings.Format)
		} else if a.ko.Spec.AccessLogSettings.Format != nil && b.ko.Spec.AccessLogSettings.Format != nil {
			if *a.ko.Spec.AccessLogSettings.Format != *b.ko.Spec.AccessLogSettings.Format {
				delta.Add("Spec.AccessLogSettings.Format", a.ko.Spec.AccessLogSettings.Format, b.ko.Spec.AccessLogSettings.Format)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.APIID, b.ko.Spec.APIID) {
		delta.Add("Spec.APIID", a.ko.Spec.APIID, b.ko.Spec.APIID)
	} else if a.ko.Spec.APIID != nil && b.ko.Spec.APIID != nil {
		if *a.ko.Spec.APIID != *b.ko.Spec.APIID {
			delta.Add("Spec.APIID", a.ko.Spec.APIID, b.ko.Spec.APIID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AutoDeploy, b.ko.Spec.AutoDeploy) {
		delta.Add("Spec.AutoDeploy", a.ko.Spec.AutoDeploy, b.ko.Spec.AutoDeploy)
	} else if a.ko.Spec.AutoDeploy != nil && b.ko.Spec.AutoDeploy != nil {
		if *a.ko.Spec.AutoDeploy != *b.ko.Spec.AutoDeploy {
			delta.Add("Spec.AutoDeploy", a.ko.Spec.AutoDeploy, b.ko.Spec.AutoDeploy)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ClientCertificateID, b.ko.Spec.ClientCertificateID) {
		delta.Add("Spec.ClientCertificateID", a.ko.Spec.ClientCertificateID, b.ko.Spec.ClientCertificateID)
	} else if a.ko.Spec.ClientCertificateID != nil && b.ko.Spec.ClientCertificateID != nil {
		if *a.ko.Spec.ClientCertificateID != *b.ko.Spec.ClientCertificateID {
			delta.Add("Spec.ClientCertificateID", a.ko.Spec.ClientCertificateID, b.ko.Spec.ClientCertificateID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DefaultRouteSettings, b.ko.Spec.DefaultRouteSettings) {
		delta.Add("Spec.DefaultRouteSettings", a.ko.Spec.DefaultRouteSettings, b.ko.Spec.DefaultRouteSettings)
	} else if a.ko.Spec.DefaultRouteSettings != nil && b.ko.Spec.DefaultRouteSettings != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.DefaultRouteSettings.DataTraceEnabled, b.ko.Spec.DefaultRouteSettings.DataTraceEnabled) {
			delta.Add("Spec.DefaultRouteSettings.DataTraceEnabled", a.ko.Spec.DefaultRouteSettings.DataTraceEnabled, b.ko.Spec.DefaultRouteSettings.DataTraceEnabled)
		} else if a.ko.Spec.DefaultRouteSettings.DataTraceEnabled != nil && b.ko.Spec.DefaultRouteSettings.DataTraceEnabled != nil {
			if *a.ko.Spec.DefaultRouteSettings.DataTraceEnabled != *b.ko.Spec.DefaultRouteSettings.DataTraceEnabled {
				delta.Add("Spec.DefaultRouteSettings.DataTraceEnabled", a.ko.Spec.DefaultRouteSettings.DataTraceEnabled, b.ko.Spec.DefaultRouteSettings.DataTraceEnabled)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DefaultRouteSettings.DetailedMetricsEnabled, b.ko.Spec.DefaultRouteSettings.DetailedMetricsEnabled) {
			delta.Add("Spec.DefaultRouteSettings.DetailedMetricsEnabled", a.ko.Spec.DefaultRouteSettings.DetailedMetricsEnabled, b.ko.Spec.DefaultRouteSettings.DetailedMetricsEnabled)
		} else if a.ko.Spec.DefaultRouteSettings.DetailedMetricsEnabled != nil && b.ko.Spec.DefaultRouteSettings.DetailedMetricsEnabled != nil {
			if *a.ko.Spec.DefaultRouteSettings.DetailedMetricsEnabled != *b.ko.Spec.DefaultRouteSettings.DetailedMetricsEnabled {
				delta.Add("Spec.DefaultRouteSettings.DetailedMetricsEnabled", a.ko.Spec.DefaultRouteSettings.DetailedMetricsEnabled, b.ko.Spec.DefaultRouteSettings.DetailedMetricsEnabled)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DefaultRouteSettings.LoggingLevel, b.ko.Spec.DefaultRouteSettings.LoggingLevel) {
			delta.Add("Spec.DefaultRouteSettings.LoggingLevel", a.ko.Spec.DefaultRouteSettings.LoggingLevel, b.ko.Spec.DefaultRouteSettings.LoggingLevel)
		} else if a.ko.Spec.DefaultRouteSettings.LoggingLevel != nil && b.ko.Spec.DefaultRouteSettings.LoggingLevel != nil {
			if *a.ko.Spec.DefaultRouteSettings.LoggingLevel != *b.ko.Spec.DefaultRouteSettings.LoggingLevel {
				delta.Add("Spec.DefaultRouteSettings.LoggingLevel", a.ko.Spec.DefaultRouteSettings.LoggingLevel, b.ko.Spec.DefaultRouteSettings.LoggingLevel)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DefaultRouteSettings.ThrottlingBurstLimit, b.ko.Spec.DefaultRouteSettings.ThrottlingBurstLimit) {
			delta.Add("Spec.DefaultRouteSettings.ThrottlingBurstLimit", a.ko.Spec.DefaultRouteSettings.ThrottlingBurstLimit, b.ko.Spec.DefaultRouteSettings.ThrottlingBurstLimit)
		} else if a.ko.Spec.DefaultRouteSettings.ThrottlingBurstLimit != nil && b.ko.Spec.DefaultRouteSettings.ThrottlingBurstLimit != nil {
			if *a.ko.Spec.DefaultRouteSettings.ThrottlingBurstLimit != *b.ko.Spec.DefaultRouteSettings.ThrottlingBurstLimit {
				delta.Add("Spec.DefaultRouteSettings.ThrottlingBurstLimit", a.ko.Spec.DefaultRouteSettings.ThrottlingBurstLimit, b.ko.Spec.DefaultRouteSettings.ThrottlingBurstLimit)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DefaultRouteSettings.ThrottlingRateLimit, b.ko.Spec.DefaultRouteSettings.ThrottlingRateLimit) {
			delta.Add("Spec.DefaultRouteSettings.ThrottlingRateLimit", a.ko.Spec.DefaultRouteSettings.ThrottlingRateLimit, b.ko.Spec.DefaultRouteSettings.ThrottlingRateLimit)
		} else if a.ko.Spec.DefaultRouteSettings.ThrottlingRateLimit != nil && b.ko.Spec.DefaultRouteSettings.ThrottlingRateLimit != nil {
			if *a.ko.Spec.DefaultRouteSettings.ThrottlingRateLimit != *b.ko.Spec.DefaultRouteSettings.ThrottlingRateLimit {
				delta.Add("Spec.DefaultRouteSettings.ThrottlingRateLimit", a.ko.Spec.DefaultRouteSettings.ThrottlingRateLimit, b.ko.Spec.DefaultRouteSettings.ThrottlingRateLimit)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DeploymentID, b.ko.Spec.DeploymentID) {
		delta.Add("Spec.DeploymentID", a.ko.Spec.DeploymentID, b.ko.Spec.DeploymentID)
	} else if a.ko.Spec.DeploymentID != nil && b.ko.Spec.DeploymentID != nil {
		if *a.ko.Spec.DeploymentID != *b.ko.Spec.DeploymentID {
			delta.Add("Spec.DeploymentID", a.ko.Spec.DeploymentID, b.ko.Spec.DeploymentID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Description, b.ko.Spec.Description) {
		delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
	} else if a.ko.Spec.Description != nil && b.ko.Spec.Description != nil {
		if *a.ko.Spec.Description != *b.ko.Spec.Description {
			delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RouteSettings, b.ko.Spec.RouteSettings) {
		delta.Add("Spec.RouteSettings", a.ko.Spec.RouteSettings, b.ko.Spec.RouteSettings)
	} else if a.ko.Spec.RouteSettings != nil && b.ko.Spec.RouteSettings != nil {
		if !reflect.DeepEqual(a.ko.Spec.RouteSettings, b.ko.Spec.RouteSettings) {
			delta.Add("Spec.RouteSettings", a.ko.Spec.RouteSettings, b.ko.Spec.RouteSettings)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.StageName, b.ko.Spec.StageName) {
		delta.Add("Spec.StageName", a.ko.Spec.StageName, b.ko.Spec.StageName)
	} else if a.ko.Spec.StageName != nil && b.ko.Spec.StageName != nil {
		if *a.ko.Spec.StageName != *b.ko.Spec.StageName {
			delta.Add("Spec.StageName", a.ko.Spec.StageName, b.ko.Spec.StageName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.StageVariables, b.ko.Spec.StageVariables) {
		delta.Add("Spec.StageVariables", a.ko.Spec.StageVariables, b.ko.Spec.StageVariables)
	} else if a.ko.Spec.StageVariables != nil && b.ko.Spec.StageVariables != nil {
		if !ackcompare.MapStringStringPEqual(a.ko.Spec.StageVariables, b.ko.Spec.StageVariables) {
			delta.Add("Spec.StageVariables", a.ko.Spec.StageVariables, b.ko.Spec.StageVariables)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Tags, b.ko.Spec.Tags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	} else if a.ko.Spec.Tags != nil && b.ko.Spec.Tags != nil {
		if !ackcompare.MapStringStringPEqual(a.ko.Spec.Tags, b.ko.Spec.Tags) {
			delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
		}
	}

	return delta
}
